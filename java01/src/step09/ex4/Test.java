package step09.ex4;

// 기존 코드를 변경하지 않고 기능을 추가시키는 방법 => 상속(inheritance)
//
// 요구사항!
// 기존의 Score 클래스는 국,영,수 점수만 관리하였다.
// 여기에 과학과 사회를 추가하고 싶다.
//
// 해결책
// - 기존 Score 클래스를 바꾼다. 
//   => 그럼 총점과 평균을 구하는 방식도 바꿔야 한다.
//   => 국,영,수 점수만 관리하고 싶은 사람은 어떻게 하냐?
//   => 이미 이 클래스로 작업한 프로그램은 어떻게 하냐?
// - 기존 Score를 그대로 두고 새로운 기능만 별도의 클래스를 만들어 추가한다.
//   => 기존의 기능은 어떻게 이용하는가?
//   => 이걸 해결하기 위해 등장한 문법이 "상속"이다.
public class Test {

  public static void main(String[] args) {
    ScoreEx s1 = new ScoreEx();
    s1.setName("홍길동");
    s1.setKor(100); // 아빠 클래스에 있는 메서드 
    s1.setEng(100); // 아빠 클래스에 있는 메서드 
    s1.setMath(100); // 아빠 클래스에 있는 메서드 
    s1.setSoc(80);
    s1.setSci(70);
    
    //문제점!
    //추가한 과목에 대해 계산할 때 반영해야 한다.
    //출력할 때도 추가한 과목을 표시해야 한다.
    //그런데 compute()와 print()는 Score의 메서드이기 때문에,
    //우리가 원하는대로 동작하지 않는다.
    // 
    //해결책!
    s1.print();
    
    //참고!
    //메서드 호출 과정
    //1) 현재의 클래스에서 찾는다.
    //2) 없으면, super 클래스에서 찾는다. 찾을 때까지 반복.
    //서브 클래스가 수퍼 클래스의 코드를 포함하는 것은 아니다.
    //단지, 수퍼 클래스가 누구인지 정보를 갖고 있을 뿐이다.
    //
    //상속의 의미?
    //Score 클래스의 명령을 자기 것처럼 사용할 수 있다는 것이지
    //Score 클래스의 모든 코드가 ScoreEx에 존재한다는 것은 아니다.
    
  }

}















