package step03;

public class Test04 {

/*
 * 전위 연산자(++ , --)
 * ++a , --a*/  
  public static void main(String[] args) {
    int a = 10;
    
//    메모리에 들어 있는 값을 하나 증가시키기
    a = a + 1;
//    연산순서 
//    a = 10 + 0 <= a 변수의 값이 그 자리에 놓인다.
//    a  = 11 <=  계산 결과를 a변수에 저장한다.
//    주의! 배정연산자(할당 연산자) 는 맨 마지막에 실행된다!!!!
    System.out.println(a);
    
//    용어정리
//    l -value  = r-value
//    l-value는 반드시 변수여야 한다.
//    r-value 는 변수 , 상수 , 리터럴이 될수 있다.
    
//    숫자가 1씩 증가하는 경우가 많기때문에 1씩 증가시키는 문법이 필요!!
//    그래서 등장한것이 전위 연산자(pre-fix ex)++a) , 후위 연산자(post-fix ex)++a)연산자가 등장하였다.
    int b = 10;
    ++b;  //b변수에 들어있는 값을 하나 증가시키고 그 값을 b에 저장한다.
    System.out.println(b);
    
    int c = 10;
    c++;  //c 변수에 값을 꺼낸다 . 하나 증가시키고 그값을 c에 저장시킨다.
    System.out.println(c);
    
//    전위연산자  : 다른 연산을 수행하기 전에 값을 먼저 증가시키고 그 증가된 값을 그자리에 놓는다.
//    1더해서 넣기
    int d = 10;
    int result = ++d + ++d + ++d;
//    d = 11
//    11 + ++d + ++d
//    11 + 12 + ++d
//    11 + 12 + 13
    System.out.println(result);
    
    
//    후위연산자 : 다른 연산을 수행하기전에 값을 먼저 꺼내서 그 자리에 놓고 값을 증가시킨다.
//    먼저놓고 증가
    int e= 10;
    int res2 = e++ + e++ + e++;
//    10 + e++ + e++
//    e=11
//    10 + 11 + e++
//    e=12
//    10 + 11 + 12
//    e=13    
    System.out.println(res2);
    
    int f = 5;
    int res3 = ++f + ++f * ++f ;
    System.out.println(res3);
    
//    전위 연산자의 우선순위는 * , /  보다 우선 수행한다 !
    
    f=5;
    res3 = ++f + (++f * ++f);
    System.out.println(res3);
    
//    전위 연산자는 괄호보다 우선 수행 된다!
    
//    후위 연산자의 우선순위는?
    
    f =5;
    res3 = f++ + f++ * f++;
    System.out.println(res3);
    
//    후위 연산자의 우선순위는 * , / 보다 우선 수행한다!!
    
    f=5;
    res3 = f++ + (f++ * f++);
    System.out.println(res3);
    
//    후위 연산자도 괄호보다 우선 수행된다##@@
    
//    배정 연산자의 실행 순서를 다시한번 확인 하는것이 목표!!
    
    
    /****************************************************************/
    int x = 10;
    x = x++;    
    System.out.println(x);
    /****************************************************************/
    
    
    

  }

}
