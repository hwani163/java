/* 교육센터 DB 모델링
 * [논리 모델 작성]
 * 1. 테이블 및 PK 식별(model01.exerd)
 * - 수강 신청 테이블 식별
 * - Primary Key 지정
 *   1)Key 컬럼 식별 => 2)Candidate Key 식별 => 3)Primary Key 결정
 * 1) Key 컬럼 식별
 *   . 데이터를 구분할 때 사용할 한 개 이상의 컬럼
 *   . 예) 
 *   [강의명, 수강생명, 강사명, 매니저명] <= 키
 *   [강의명, 강사명, 강의시작일, 수강생명, 수강생전화] <= 키
 *   [강의명, 강의시작일, 수강생이메일] <= 키
 *   [강의명, 강의시작일, 강사이메일] <= 키
 *   [강의명, 강의시작일, 강사전화] <= 키 
 * 
 * 2) 후보키(Candidate key) 선별; 최소키; Unique Key 
 *   . Key를 최소의 컬럼으로 정리한 것.
 *   . Primary Key의 후보자
 *   . Primary Key로 선택되지 않은 후보 키는 유니크 키가 된다.
 *   . 예) 
 *   [강의명, 강의시작일, 수강생이메일] <= 후보 키
 *   [강의명, 강의시작일, 강사이메일] <= 후보 키
 *   [강의명, 강의시작일, 강사전화] <= 후코 키 
 *    
 * 3) 주키(Primary Key) 선정 
 *   . DBA가 후보 키 중에서 실제로 사용할 키를 결정.
 *   . 주의! Primary Key 값은 한 번 결정되면 바꿀 수 없다.
 * 
 * 4) 도저히 Primary Key를 결정할 수 없을 때? 애매할 때? 
 *   . 임의의 컬럼을 만들어 PK로 지정하라!
 * 
 * - model01에서 "수강신청" 테이블의 PK를 뽑기가 애매하다. 
 *   => 그래서 임의의 컬럼(수강신청번호)을 생성하고 PK로 지정한다.
 * 
 * 
 * 2. 제1정규화(model02.exerd)
 * - 중복 컬럼이나 값이 있다면 분리하여 별도 테이블로 만들고 부모 자식 관계를 맺는다.
 * - 1) 중복컬럼 : 교실사진1, 교실사진2, 교실사진3
 *      => 문제점: 사진을 세 개 초과하여 넣을 수 없다.
 *               사진을 한 개만 넣을 때는 두 개의 컬럼이 빈 채로 낭비된다.
 *      => 해결책: 별도 테이블(교실사진)로 분리하여 부모 자식 관계를 맺는다.
 * - 2) 값 중복 : 강의 정보, 강사 정보
 *      => 문제점: 똑 같은 값이 레코드마다 중복 저장된다면 메모리 낭비, 
 *               변경이 힘들다.
 *      => 해결책: 별도 테이블(강의, 강사)로 분리하여 부모 자식 관계를 맺는다. 
 * 
 * 3. 제2정규화 
 * - PK가 두 개 이상의 컬럼으로 이루져있을 경우에 수행.
 * - PK를 제외한 다른 모든 일반 컬럼은 PK 컬럼 모두에 종속되어야 한다.
 * 
 * 4. 제3정규화(model03.exerd)
 * - PK에 종속되지 않은 컬럼이 있다면, 별도 테이블로 분리하여 부모-자식 관계를 맺는다.
 * - 일반 커럼이 다른 일반 컬럼에 종속되는 경우.
 * - 학생사진, 학생이메일, 학생전화, 학생주소, 학생학력, 직장인여부 컬럼 모두 학생명에 종속된다.
 *   곧 학생사진은 학생명이 바뀔 때 그 값이 바뀐다. 학생이메일도 학생명이 바뀔 때 그 값이 바뀐다.
 * - PK에 종속된다는 것은 PK가 바뀔 때 그 값이 바뀐다는 것이다.
 *   그러나 수강신청 테이블의 경우 학생이메일이나 학생사진 등은 수강신청번호 보다는 학생이름에 
 *   좌우된다. 
 * - 다른 예: 우편번호(일반컬럼)와 기본 주소(일반컬럼)와의 관계
 *   우편 번호가 바뀌면 기본 주소가 바뀐다. 
 *   그러나 상세 주소는 사용자가 바뀌어야만 그 값이 바뀐다.  
 * 
 * 5. 다 대 다 관계 해소(model04.exerd)
 * - DBMS는 다 대 다 관계를 구현할 수 없다.
 * - 해결책: 관계를 저장할 테이블을 생성한 후 일 대 다 관계로 전환한다.
 * - 강사와 강의 테이블 => 강의배정 테이블을 생성한 후 일 대 다 관계로 만든다.
 * 
 * 용어 정리!
 * - Primary Key : 테이블에 입력된 데이터를 구분하기 위해 사용하는 한 개 이상의 컬럼.
 * - Foreign Key : 다른 테이블에 있는 데이터를 가리키는 그 데이터의 PK 값.
 * - 부모(PK) - 자식(FK) : 부모-작식 관계가 형성되려면 자식 테이블에서 부모 테이블의 PK
 *                       값을 갖져야 한다. 
 * 
 * 관계의 종류 
 * - 비식별 관계(non-identifying relationship)
 *   => 자식 테이블의 foreign key가 그냥 일반 컬럼으로 되어 있을 경우.
 *   => 관계를 표현하는 값이 해당 테이블에서 식별자로 사용되지는 않는다는 의미.
 *   => 외부키 != PK
 *   => 표기: 점선으로 표시(-|..............<)
 *   => 예: 강의 - 수강신청, 강의 - 강의장
 *  
 * - 식별 관계(identifying relationship)
 *   => 자식 테이블의 foreign key가 PK로 되어 있을 경우.
 *   => 관계를 표현하는 동시에 그 테이블의 식별자로 사용된다는 의미.
 *   => 외부키 == PK
 *   => 표기: 실선으로 표시(-|----------<)
 *   => 예: 강사 - 강사배정, 강의 - 강사배정 
 * 
 * 6. 관계와 차수(model05.exerd) 
 * - 관계에 대해 부모 자식 간의 대입 회수를 지정한다.  
 * - 0..1 : 0 또는 1 => -|0----
 * - 1    : 1 => -|-----
 * - *    : 0 이상 => ------0|<-
 * - 1..* : 1 이상 => -------|<-
 * 
 * - 부모 테이블과의 관계가 0 또는 1이라는 것은 
 *   자식 테이블의 외부키에 null을 넣을 수 있다는 뜻이다.   
 * 
 * 7. 인덱스 컬럼 지정(model06.exerd)
 * 1) 유니크 컬럼 선정
 * - PK는 아니지만 중복되어서는 안되는 컬럼.
 * 2) 인덱스 컬럼 선정
 * - 검색 조건에 사용하는 컬럼.
 * - 인덱스 컬럼을 지정하면 그 컬럼으로 정렬한 정보를 별도 메모리에 관리한다.
 * - 인덱스 컬럼을 많이 지정할 수록 메모리 낭비가 심해지고, 
 *   값을 변경하거나 삭제하거나 추가할 때마다 인덱스를 갱신해야 하기 때문에,
 *   변경,삭제,추가 속도가 느리다. 
 * - 가능한 조회 위주로 사용할 테이블에 대해 인덱스를 걸도록 하라!
 * 
 * 8. NULL 허용 여부 설정(model06.exerd)
 * - 필수 입력 컬럼을 지정한다.
 *
 * [물리 모델 작성] 
 * 9. 도메인 분류 및 컬럼에 적용(model07.exerd)
 * - 테이블의 컬럼들을 데이터 유형과 성격에 따라 묶어서 타입을 정의한다.
 * - 이점: 컬럼 타입을 변경하기 쉽다.  
 * 
 * 10. 테이블과 컬럼에 대해 영어 이름을 짓는다.
 * - DBMS에서 사용할 영어 테이블 이름과 컬럼 이름을 만든다.
 * - 테이블 이름: 보통 복수형으로 표현한다.
 * - 여러 단어로 구성된 경우 밑줄(_)로 연결한다.
 * - 단어가 너무 긴 경우는 2자~5자 정도의 단어로 함축하여 표현한다.
 * 
 * 11. 컬럼 속성 상세 정의
 * - AUTO_INCREMENT, DEFAULT 등 제약 조건을 상세하게 지정한다.
 * 
 * [포워드 엔지니어링(forward engineering)]
 * - DB 모델을 SQL 문으로 뽑아내는 것.   
 * - 참고: 
 *   리버스 엔지니어링(reverse engineering)은 DBMS에 존재하는 테이블을 조사하여
 *   DB 모델을 뽑아내는 것.      
 */













