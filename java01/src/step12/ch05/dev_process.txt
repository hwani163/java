[개발 과정]
개발할 CRUD를 선정한다. 
1. 분석 
- UI 프로토타입 생성(v)
- Domain 객체를 식별
  => 화면에 다루는 데이터를 추상화 한다.
  => 복합 자료형을 정의하라! : User.java
  
2. 설계 및 구현 
- 작업에 참여하는 객체를 식별
  => UI를 처리하는 객체 식별 : Boundary
  => 중간에서 조정하는 객체를 식별 : Control
  => 데이터를 처리하는 객체 식별 : Entity
  => 식별 방법
    . CRUD 당 하나의 제어 객체를 정의한다. : MemberControl.java
    . 사용자가 시스템을 사용하는 과정을 따라가면서 UI 객체를 정의한다.
      초기화면 : MemberInit.java
      회원목록 : MemberList.java
      회원등록 : MemberAdd.java
      회원상세보기 : MemberDetail.java
      회원변경 : MemberChange.java
      회원삭제 : MemberDelete.java
    . 데이터를 다루는 부분에 대해서 엔티티 객체를 정의한다. : MemberDao.java
    
- 작업을 완성하기 위해 각 객체가 상호작용하는 방법을 설계한다. 
  => 각 클래스가 가져야 할 메서드를 식별하게 된다.    
  => 작업1: 프로그램의 초기 화면을 출력하기 (ch03)
    . 참여 객체: MemberControl, MemberInit
    . 객체 사이의 흐름
      1) init() --> MemberControl
      2) MemberControl : execute() --> MemberInit
    . 코드로 구현: App.java, MemberControl.java, MemberInit.java
  
  => 작업2: 사용자로부터 명령어를 입력 받기 (ch04)
    . 참여 객체: App
    . 객체 사이의 흐름
      1) prompt() --> App
      2) App : ">" 출력 --> 키보드 입력 준비 
      3) 사용자 : "명령어를 입력 --> App
      4) App : 명령어 확인    
    . 구현 : App01.java, App02.java
  
  => 작업3: 회원 등록하기 (ch04)
    . 참여 객체: App, MemberControl, MemberAdd, User, MemberDao
    . 객체 사이의 흐름(시나리오)
      1) App : add() --> MemberControl
      2) MemberControl : execute() --> MemberAdd
      3) MemberAdd : 사용자로부터 회원 정보 입력 받는다. --> new --> Member
      4) MemberAdd : return Member
      5) MemberControl : insert(member) --> MemberDao
    . 구현 : App.java, MemberControl.java, MemberAdd.java, MemberDao.java          
  
  => 작업4: 회원 목록조회 (ch05)
    . 참여 객체: App, MemberControl, MemberList, User, MemberDao
    . 시나리오
      1) App: list() --> MemberControl
      2) MemberControl: selectList() --> MemberDao
      3) MemberDao: return User[]
      4) MemberControl: execute(User[]) --> MemberList
    . 구현 : App.java, MemberControl.java, MemberList.java, MemberDao.java
  
  => 작업5: 회원 정보 조회 (ch05)
    . 참여 객체: App, MemberControl, MemberDao, User, MemberDetail      
    . 시나리오
      1) App: detail(번호) --> MemberControl
      2) MemberControl: select(번호) --> MemberDao
      3) MemberDao: return User
      4) MemeberControl: execute(User) --> MemberDetail
    . 구현: App.java, MemberControl.java, MemberDetail.java, MemberDao.java
    
  => 작업6: 회원 삭제 (ch05)  
    . 참여 객체: App, MemberControl, MemberDelete, MemberDao
    . 시나리오
      1) App: delete(번호) --> MemberControl
      2) MemberControl: confirm() --> MemberDelete
      3-1) MemberDelete: return true
      4) MemberControl: delete(번호) --> MemberDao
      5) MemberControl: execute() --> MemberDelete
    . 구현: App.java, MemberControl.java, MemberDelete.java, MemberDao.java
    
  => 작업7: 회원 변경 (ch05)
    . 참여 객체: App, MemberChange, MemberControl, MemberDao
    . 시나리오
      1) App: change(번호) --> MemberControl
      2) MemberControl: select(번호) --> MemberDao
      3) MemberDao: return User
      4) MemberControl: execute(User) --> MemberChange
      5) MemberChange: return User
      6) MemberControl: update(번호, User) --> MemberDao     
    . 구현: App.java, MemberControl.java, MemberChange.java, MemberDao.java
    
    
    
    
    
    
    
    
    
    
    
    